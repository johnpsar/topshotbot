from selenium import webdriver
from selenium.webdriver.chrome import options
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
import time
from random import randrange


def initiate_driver():
    chromeoptions = webdriver.ChromeOptions()

    chromeoptions.add_argument('--disable-blink-features=AutomationControlled')
    chromeoptions.add_argument("--profile-directory=Default")
    chromeoptions.add_argument(
        "--user-data-dir=/home/johnpsar/.config/google-chrome")
    chromeoptions.add_experimental_option(
        "excludeSwitches", ['enable-automation'])
    chromeoptions.add_argument(
        "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36")
    driver = webdriver.Chrome(options=chromeoptions)
    driver.implicitly_wait(1)
    return driver


def createUrl(minPrice, maxPrice, players, teams,series):
    baseurl = "https://nbatopshot.com/search"
    print("mpika")
    for i in range(len(players)):
        if(i == 0):
            baseurl += "?byPlayers="
            baseurl += players[i]
        else:
            baseurl += ","+players[i]
    for i in range(len(teams)):
        if(i == 0):
            if(len(players) == 0):
                baseurl += "?"
            else:
                baseurl += "&"
            baseurl += "byTeams="
            baseurl += teams[i]
        else:
            baseurl += ","+teams[i]
    for i in range(len(series)):
        if(i == 0):
            if(len(players) == 0 and len(teams)==0):
                baseurl += "?"
            else:
                baseurl += "&"
            baseurl += "bySeries="
            baseurl += series[i]
        else:
            baseurl += ","+series[i]
    if(minPrice >= 0 and maxPrice >= minPrice):
        baseurl = baseurl+"&byPrice="+str(minPrice)+"-"+str(maxPrice)
    print(baseurl)
    return baseurl


def findMoment(driver, url):
    while 1 > 0:
        try:
            driver.get(url)
            moment = WebDriverWait(driver, 5).until(
                EC.presence_of_element_located((By.CLASS_NAME, "kAMKVp")))
            return moment
        except:
            print("did not find any moments.Trying again in 3 seconds")
            time.sleep(randrange(2))


def selectAndBuy(driver, url):
    try:
        selectAndBuyButton = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.CLASS_NAME, "fDbbjs")))
        print("Buy button found")
        selectAndBuyButton.click()
    except:
        print("poop")

# price is in format $5.00
# first split in characters, then keep only 5 then convert to int


def getPrice(driver):
    price_text = WebDriverWait(driver, 5).until(
        EC.presence_of_element_located((By.CLASS_NAME, "sBCOF")))
    price_chars = list(price_text.text)
    price_string = ""
    startAppending = 0
    for char in price_chars:
        if(char == "."):
            break
        if (startAppending == 1):
            price_string += char
        if(char == "$"):
            startAppending = 1
    price = int(price_string)
    print("price is", price)
    return price


def chooseFromPopup(driver, url, maxPrice):
    try:
        popup = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.CLASS_NAME, "HHeAH")))
        print("Pop up found")
        price = getPrice(driver)
        if (price <= maxPrice):
            # choose circular button from popup
            selectButton = WebDriverWait(driver, 5).until(
                EC.presence_of_element_located((By.CLASS_NAME, "hnOFYU")))
            print("selected cheapest option")
            selectButton.click()
            # press buy button bottom right
            buyButton = WebDriverWait(driver, 5).until(
                EC.presence_of_element_located((By.XPATH, "/html/body/div[6]/div/div/div/div[5]/div[2]/div/button")))
            print("purchase button pressed")
            buyButton.click()
            # in case of another buyer need to press button twice
            try:
                buyButton2 = WebDriverWait(driver, 4).until(
                    EC.presence_of_element_located((By.XPATH, "//*[text()='Continue purchase']")))
                buyButton2.click()
            except:
                print("didnt need to press buy button twice")
            try:
                print("")
            except:
                print("gucci")
            continueToPurchaseButton = WebDriverWait(driver, 30).until(
                EC.presence_of_element_located((By.CLASS_NAME, "iGmLag")))
            continueToPurchaseButton.click()
        else:
            print("price is not right")
            driver.quit()

    except:
        print("shit")
        driver.quit()


def buyWithDapper(driver):
    buyWithDapperBalanceButton = WebDriverWait(driver, 30).until(
        EC.presence_of_element_located((By.CLASS_NAME, "css-wae9sn")))
    buyWithDapperBalanceButton.click()
    print("EASY CLAPPPP LETS GO")
    time.sleep(2)
    driver.quit()


def main(minPrice, maxPrice, players, teams,series):
    driver = initiate_driver()
    url = createUrl(minPrice, maxPrice, players, teams,series)
    moment = findMoment(driver, url)
    print("Found Moment!")
    # time.sleep(100)  #uncomment this first time
    moment.click()
    selectAndBuy(driver, url)
    chooseFromPopup(driver, url, maxPrice)
    buyWithDapper(driver)


cardsBought = 0
errors = 0
try:
    while(cardsBought <= 4):#change this number to the # of cards you want to buy
        print("Amount of tries : ", cardsBought+errors)
        try:
            main(0, 3, ["202692", "203932"], ["1611661330", "1610612738"],["series1","summer2021"])
            cardsBought += 1
            time.sleep(50)
        except:
            print("Couldn't buy card")
            errors += 1
except KeyboardInterrupt:
    print("done")



# arguments are
# 1)min price (-1 if empty)
# 2)max price   (-1 if empty)
# 3)array of players ([] if empty)
# 4)array of teams ([] if empty)
# 5)array of series([] if empty)

# ex   main(0, 3, ["202692", "203932"], ["1611661330", "1610612738"],["series1","summer2021"])
#ex empty main(-1,-1,[],[],[])


#first time uncomment line 160 time.sleep(100) to have time to login. Then recomment
